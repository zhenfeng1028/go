package main

import (
	"fmt"
	"unsafe"
)

// 结构体对齐
// 编译器默认对齐数（linux：4字节，VS：8字节）

type S1 struct {
	Field1 byte  // byte类型占1个字节，该变量对齐数为1，实际偏移量为0
	Field2 int32 // int32类型占4个字节，该变量对齐数为4，偏移量应该是4的倍数，实际偏移量为4
	Field3 int16 // int16类型占2个字节，该变量对齐数为2，偏移量应该是2的倍数，实际偏移量为8
}

// 结构体整体的对齐数为所有成员的对齐数中最大的一个，对齐数为4
// 结构体整体大小，按照上面数据占据空间大小，计算得结构体大小为10字节
// 按照对齐规则，应该对齐到4的倍数，实际大小为12字节

type S2 struct {
	Field1 byte  // byte类型占1个字节，该变量对齐数为1，实际偏移量为0
	Field2 int16 // int16类型占2个字节，该变量对齐数为2，偏移量应该是2的倍数，实际偏移量为2
	Field3 int32 // int32类型占4个字节，该变量对齐数为4，偏移量应该是4的倍数，实际偏移量为4
}

// 结构体整体的对齐数为所有成员的对齐数中最大的一个，对齐数为4
// 结构体整体大小，按照上面数据占据空间大小，计算得结构体大小为8字节
// 按照对齐规则，应该对齐到4的倍数，实际大小为8字节

func main() {
	fmt.Printf("结构体S1的实际大小为：%d\n", unsafe.Sizeof(S1{})) // 12
	fmt.Printf("结构体S2的实际大小为：%d\n", unsafe.Sizeof(S2{})) // 8
}
